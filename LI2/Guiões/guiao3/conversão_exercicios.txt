Exemplo de exercícios de conversão 

1º exercício 
0.09375 para 32 bit single precision floating point

i) Como é um número positivo, sign bit = 0

ii) Passar para binário 
0.09375(10) = 0.00011 (2)

0.09375 x 2 = 0,1875
0.1875 x 2 = 0,375 
0.375 x 2 = 0,75 
0.75 x 2 = 1,5 
0.5 x 2 = 1.0

iii) Normalizar para a mantissa e o unbiased expoente 
0.00011 = 1.1 x 2⁽-4) 

iv) 
-4 + 127 = 123 (10) = 01111011 (2) -> adiciona um 0 à esquerda para ficar 8 bits

123/2 = 61 (1)
61/2 = 30 (1)
30/2 = 15 (0) 
15/2 = 7 (1)
7/2 = 3 (1)
3/2 = 1 (1)
1/2 = 0 (1)

v) Determinar a mantissa
1.1 = 1 

vi) 
0 01111011 10000000000000000000000 

2º exercício 
-123.3 para 32 bit single precision floating point

i) Como o número é negativo, então sign bit = 1;

ii)  
-123.3 (10) = 1111011.0100110011 ... (2)

123/2 = 61 (1) 
61/2 = 30 (1)
30/2 = 15 (0)
15/2 = 7 (1)
7/2 = 3 (1)
3/2 = 1 (1)
1/2 = 0 (1)

0.3 x 2 = 0.6 
0.6 x 2 = 1.2 
0.2 x 2 = 0.4 
0.4 x 2 = 0.8 
0.8 x 2 = 1.6 
0.6 x 2 = 1.2 
0.2 x 2 = 0.4 
0.4 x 2 = 0.8 
0.8 x 2 = 1.6 
0.6 x 2 = 1.2 

iii) Normalizar para a mantissa e o unbiased expoente 
1111011.0100110011 ... (2) = 1.1110110100110011 ... x 2⁶   

iv) 
6 + 127 = 133 (10) = 10000101 (2)

133/2 = 66 (1)
66/2 = 33 (0)
33/2 = 16 (1)
16/2 = 8 (0)
8/2 = 4 (0)
4/2 = 2 (0)
2/2 = 1 (0)
1/2 = 0 (1)

v) Para determinar a mantissa 
1.1110110100110011... = 1110110100110011010 

vi) 
1 10000101 1110110100110011010

3º exercício 
0.1 para 32 bit single precision floating point

i) Como o número é positivo, então sign bit = 0;

ii) 
0.1 (10) = 0.00011001100110011001100110011 ... (2)

0.1 x 2 = 0.2 
0.2 x 2 = 0.4 
0.4 x 2 = 0.8 
0.8 x 2 = 1.6 
0.6 x 2 = 1.2 
0.2 x 2 = 0.4 
0.4 x 2 = 0.8 
0.8 x 2 = 1.6 

iii) 
0.00011001100110011001100110011 = 1.1001100110011001100110011 x 2⁽-4)

iv) 
-4 + 127 = 123 (10) = 01111011 (2)

123/2 = 61 (1) 
61/2 = 30 (1)
30/2 = 15 (0)
15/2 = 7 (1)
7/2 = 3 (1)
3/2 = 1 (1)
1/2 = 0 (1)

v) Determinar a mantissa 
1.1001100110011001100110011 = 10011001100110011001101

vi) 
0 01111011 10011001100110011001101
